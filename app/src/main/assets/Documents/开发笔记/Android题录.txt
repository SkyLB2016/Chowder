面试题总结

●01.java中equal与==的区别
1）基本数据类型==比较的是值，非基本类型比较的是内存地址
2）Object默认equal比较的是内存地址。可重写其方法，按自己的需求来定义相比较的内容。

●02.handler机制与RaJava有什么区别：相同都是为了线程间通信
1）Rxjava线程切换更方便，可以直接切换子线程和UI线程，handler需要在子线程中发送消息，在主线程中去接收消息，才能改变UI。
2）RxJava是观察者模式，Handler消息队列用的是双向链表，类似于linkedList，是责任链模式。

●03.广播有几种创建方式，有什么区别？
两种，动态注册和静态注册（8.0以后不能静态注册广播，官方说法是为了省电）；区别：
1）动态注册的广播永远要快于静态注册的广播，不管静态注册的优先级设置的多高，不管动态注册的优先级有多低。也就是和设置优先级无关，动态就是比静态快。
2）动态注册广播不是常住性广播，也就是说广播跟随activity的生命周期。注意：activity调用ondestory，移除广播接收器。静态注册是常驻型，不能自动销毁，应用程序关闭后，如有信息广播来，程序也会被系统调用自动运行。
3）在同一个优先级下，谁先启动，谁将先接收到广播。

●04.Android的数据存储方式有哪些
1）Shardpreferences（适合轻量级数据存储，采用xml键值对的形式存储到本地，只能用于一个app内）
2）文本文件存储（序列化与反序列化）
3）SQLite数据库存储
4）ContentProvider
5）网络存储

●05.服务的启动方式和对应的生命周期以及区别
1）startService（onCreate-（onStart已舍弃）-onStartCommand-onDestory）
服务与启动者没有必然的联系，启动者销毁，服务也可以存在；只有主动调用StopService方法才能停止。
2）bindService（onCreate-onBind-onUnbind-onDestory）
服务与启动者相互关联，启动者销毁，服务也跟着销毁；
3）startService之后再bindService这样避免宿主死亡之后service跟着被销毁。

●06.线程间通信有哪些方式
1）接口
2）handler
3）观察者模式（EventBus，RxJava也可以实现）
4）AsyncTask
5）广播BroadCast
6）SharedPreferences

●07.进程间通信有哪些方式
1）intent，拨打电话，发短信等。
2）ContentProvider，多个App共享数据
3）AIDL（Android Interface Define Language）服务，客户端定义接口暴露给服务端使用
4）BroadCast
5）Socket

●08.描述一下ANR错误，哪些情况会发生，如何避免？
Activity内事件在5s后依然无响应，broadcastreceiver 10s内无法回应，service 20s内无法处理完成都会导致应用无响应。（在主线程做好事操作都会导致ANR）
避免：
1）不要在主线程做好事操作（数据库查询，网络操作，大量数据存储，图片的切割等）。
2）不要再广播内做耗时操作，如果非要，那么请通过service新启线程来进行耗时操作。

●09.横竖屏切换activity的生命周期
1）不设置manifest里设置Android:configChanges，会调用onSaveInstanceState（一般会在stop之后）和onRestoreInstanceState；执行顺序
onpause-onstop-（onSaveInstanceState）-ondestory-onCreate-onStart-onRestoreInstanceState-onresume
2）设置manifest里设置android:configChanges="orientation"，不会调用生命周期，只会执行onConfigurationChanged方法。
configchanges一般常用三个选项：
locale：系统语言变化
keyboardHidden：键盘的可访问性发生了变化
orientation：屏幕方向变化

●10.MVC与MVP的区别
1）功能复杂的话，MVC的activity或fragment会很庞大，view与model耦合严重
2）功能复杂的话，MVP会产生很多接口，activity需要很多接口方法来更新UI，model与view不直接进行交互，达到解耦的效果

●11.LRU算法的原理？
LRU（Least Recently Used）最近最少使用，LRU使用的是LinkedHashMap，get、put、remove，队尾添加，队首移除；
lru链表的顺序是LinkedHashMap中的accessOrder来控制的；LinkedHashMap中重写了get和afterNodeAccess方法；afterNodeAccess(e)是用来进行重排序的。
每次调用get、put时，都会在队尾添加，如果put时内存缓存达到设定的最大值，将链表头部的对象移除。
accessOrder为true时，get方法中会调用afterNodeAccess(e)，put方法中是在HashMap中调用的afterNodeAccess(e)；
各版本代码稍有不同，但基本思想就是这样的。

●12.IntentService和Service有什么区别？
1）Service不是独立的进程，也不是独立的线程，他也是依赖于应用程序的主线程，可以说是没有界面的activity，后台执行，不建议在service中编写耗时的逻辑和操作，否则会ANR。
2）IntentService是Service的子类，IntentService在执行onCreate操作的时候，内部开了一个线程，去执行耗时操作。通过Handler Looper Message的方式实现了一个多线程的操作，同时耗时操作也可以被这个线程管理和执行，不会产生ANR。
3）其实就是IntentService内部单开了一个线程

●13.调用系统界面时，怎么保存当前activity的状态？
1）为了防止调用系统界面时，当前activity被回收，需要覆写onSaveInstanceState，保存当前的状态变量值。

●14.activity与Fragment之间的通信方式
1）接口（常用）
2）EventBus（观察者模式）（常用）
3）Handler（偶尔）
4）广播broadcast（基本不用）

●15.service和线程的区别，我们为什么不用service代替线程，相应在什么情况下使用？
1）Service是Android的四大组件之一，对应的service是运行在主线程上的，可以说是一个没有显示页面的activity，由系统进程托管。他们之间的通信类似于client和server，是一种轻量级的IPC通信，这种通信的载体是binder，他是在Linux层交换信息的一种IPC
2）线程是程序执行的最小单元，是分配CPU的基本操作。耗时操作一般会开启异步线程来执行。
区别：
3）线程的运行是独立，要么运行结束，要么主动停止。一般一条线程只会在一个activity内生成以及运行，不能被多个activity进行控制。service可以被共用。
4）service也是在主线程上运行，耗时操作会ANR。
5）在应用中，如歌曲播放可以使用service，下载之类的耗时操作使用异步线程。

●16.RecyclerView 和 ListView的区别
1）RecyclerView的缓存是view+Viewholder+flag，更规范化；listview只是缓存view刷新数据。
2）RecyclerView可以自定义分割线
3）RecyclerView可以实现线性布局，网格布局，瀑布流布局效果
4）RecyclerView支持局部刷新
5）RecyclerView没有setOnItemClickListener，setOnItemLongClickListener，而是添加了addOnItemTouchListener，可以多次添加事件
6）RecyclerView轻松实现item动画效果
7）ListView具有setEmptyView，addHeaderView，addFooterView

●.RecyclerView嵌套卡顿如何解决？
1）设置预加载的数量LinearLayoutManager.setInitialPrefetchItemCount(4)，默认加载是2个。
2）设置子项缓存，设置自带滑动冲突属性setHasFixedSize(true);setNestedScorollingEnabled(false);可以完美解决。
3）不过Google不推荐RecyclerView嵌套使用，需要嵌套尽量找类似于ExpandableListview第三方控件来解决。

●17.View的绘制流程
从ViewRoot的performTraversals方法开始依次调用performMeasure、performLayout和performDraw这三个方法。
这三个方法分别完成顶级View的measure、layout和draw三大流程，其中performMeasure会调用measure，measure又会调用onMeasure，在onMeasure中则会对所有子元素进行measure（测量），这个时候measure流程就从父容器传递到子元素中了，这样就完成了一次measure过程，接着子元素会重复父容器的measure，如此反复就完成了整个View树的遍历。
同理，performLayout和perforDraw也分别完成performMeasure类似的流程。通过这三大流程，分别遍历整颗View树，就实现了Measure，Layout，Draw这一过程，view就绘制出来了。

●18.invalidate与requestLayout的区别，以及postInvalidate
1）View不停向上找parent，可以一直找到DecorView，按理说DecorView是顶点了，但是DecorView还有个虚拟父View，ViewRootImpl。ViewRootImpl不是一个View或者ViewGroup，他有个成员没View是DecorView，所有的操作从ViewRootImpl开始自伤而下分发。
2）View的invalidate不会导致ViewRootImplement的invalidate被调用，而是递归调用父View的invalidateChildInparent，直到ViewRootImpl的invalidateChildInParent，然后触发performTraversals，会导致当前View被重绘，由于mLayoutRequested为false，不会导致onMeasure和onLayout被调用，而onDraw会被调用。
3）一个View的invalidate会导致本身PFLAG_INVALIDATED的值变为1，导致本身以及父族ViewGroup的PFLAG_DRAWING_CACHE_VALID变成0.
4）requestLayout会直接递归调用父窗口的requestLayout，直到ViewRootImpl，然后触发perforTraversals，由于mLayoutRequested为true，会导致onMeasure和onLayout被调用，不一定会触发onDraw。
5）requestLayout触发onDraw应该是在layout过程中发现l,t,r,b和以前不一样，那就触发一次invalidate，所以出发了onDraw，也可能是因为别的原因导致mDirty非空（比如在跑动画）
6）requestLayout会导致自己以及父族View的PFLAG_FORCE_LAYOUT和FLAG_INVALIDATED标志被设置。

7）invalidate是在UI线程自身中使用，要在异步线程中使用需要通过handler等消息通知UI主线程，在UI主线程中调用invalidate。
8）postInvalidate主要是在非UI主线程中使用，刷新主线程UI；当然主线程作为一个线程，用也没有毛病。

9）一般来说，主线程中刷新调用invalidate，异步使用postInvalidate；需要重新测量measure就调用requestLayout，为保证重绘就跟着调用个invalidate。
需要注意的是，view调用invalidate只会重绘自身，ViewGroup调用invalidate则会调用整颗view树。

●19.ArrayList、LinkedList、Vector的区别
1）ArrayList类似于C中的数组，查找方便，插入复杂；
2）LinkedList类似于C中的链表，插入简单（只是把两个item的上下节点换了一下），查找复杂度高；
3）Vector类似于ArrayList，在Java1.5之后就不推荐使用了

●20.Map、Set、List、Queue、Stack的特点与用法。
1）map根据key 找 value。
2）set元素不能重复。
3）list类似数组。
4）Queue队列，先进先出。
5）Stack 栈，后进后出。

●21.HashMap和HashTable的区别（没用过）
1）当需要同步时，用HashTable，反之用HashMap。但是因为在需要时，HashMap可以被同步，HashMap的功能比HashTable的功能更多，而且他不是基于一个陈旧的类，所以有人认为在各种情况下，HashMap都优先于HashTable。
2）只有HashMap可以让你将控制作为key或value。key只能有一个空，不重复，value可以重复。

●22.HashMap和ConCurrentHas和Map的区别，
1）有并发访问的时候用ConcurrentHashMap，效率比用锁的HashMap好。
2）HashMap的底层源码是用（Entry）数组+链表的形式实现，详情看：http://liaokang-java.iteye.com/blog/1098404

●23.TreeMap、HashMap、LinkedHashMap的区别。
1）LinkedHashMap也是一个HashMap，但是内部维持了一个双向链表可以保持顺序。
2）TreeMap可以用于排序（根据键排序，默认是升序）。
3）HashSet是通过HashMap实现的，TreeSet是通过TreeMap实现的，只不过Set用的只是Map的key，Map的key和Set都有一个共同的特性就是集合的唯一性。TreeMap只是多了一个排序的功能。

●24.Collection包结构与Collections的区别？
1）Collection--list--ArrayList，LinkedList，Vector
2）Set--HashSet，TreeSet
3）Map--HashMap，TreeMap，HashTable
4）Collection是集合类的上级接口，子接口主要有Set和List、Map。
5）Collections是针对集合类的一个帮助类，提供了操作集合的工具方法：一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。

●25.try...catch...finally，如果try里有return，finally还执行吗？
答：必须执行，如果try里有，finally里也有，也会执行finally中的return。

●26.override和overload含义的区别
1）override是重写父类的函数，可以用super继承原有的方法结构，并重写属于自己的代码
2）overload是函数重载，根据传入参数的个数，类型不同来区分。dart语言不支持重载，需要不同的名称。

●27.interface与abstract类的区别？
1）interface是接口，可以有常量，所有方法都默认是public，且不能实现。
2）abstract类，只是不其他普通类多了个抽象方法，且必须有抽象方法。

●28.static class与非静态的区别？
1）静态内部类不需要有只想外部类的引用，非静态内部类可以持有对外部类的引用。
2）非静态内部类能够访问外部类的静态和非静态成员；静态类不能访问外部类的非静态成员，他只能访问外部类的静态成员。
3）单例模式可以用静态内部类的方式来实现。
4）静态内部类的加载不需要依附外部类，在使用时才加载，不过在加载静态内部类的过程中也会加载外部类。

●29.线程同步的方法：synchronized、lock、reentrantLock等
1）Lock.lock()加锁，lock.unlock()释放锁
2）reentrantLock，可重入锁。
3）synchronized只有单一条件，不能设置加锁时间等，也不能设置多个锁。

●30.wait和sleep的区别
1）sleep不能释放同步锁，wait释放同步锁
2）sleep是Thread类的方法，wait是object的方法，wait，notify，notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用。

●31.反射的作用与原理
指的是我们可以于运行时加载、探知、使用编译期间完全未知的classes。换句话说，Java程序可以加载一个运行时才得知名称的class，获悉其完整构造（但不包括methods定义），并声称其对象实体、或对其fields设值、或唤起其methods。
用途：Java反射机制主要提供了一下功能：
1）在运行时判断任意一个对象所属的类；
2）在运行时构造任意一个类的对象；
3）在运行时判断任意一个类所具有的成员变量和方法；
4）在运行时调用任意一个对象的方法；
5）生成动态代理。

●32.进程与线程的区别。
线程就是共享父进程的空间的便是线程，所以子线程的VSIZE必然相同，否则要么是子进程，要么是平级的进程，再不然就是父进程。
kthread进程是所有内核进程的父进程。
init进程：是所有用户（App）进程的父进程（或者父父进程）

进程包括多个线程，一个程序一个进程，可以有多个线程；多线程的优点可以提高执行效率，提高资源利用率。
线程作为调度和分配的基本单位，进程作为拥有资源的基本单位。

●33.死锁的必要条件，怎么处理死锁。
1）循环等待
2）非抢占
3）互斥使用
4）占有并等待。
处理方法：
死锁避免--银行家算法：包含资源请求算法和安全性算法，死锁检测算法。

●34.IPC的几种通信方式
共享内存、消息传递、管道、信号量

●35.TCP的三次握手与四次挥手
1）开始连接：客户端请求server连接，server发送响应码，客户端告诉server已匹配。
2）开始传输数据。
3）客户端告诉server请求断开连接，server发送两次回执，客户端与server断开

●36.thread与runnable的区别
1）Thread继承自runnable，一个类对应一个run方法。
2）实现runnable接口比继承Thread更灵活，适合多个相同程序代码的线程去处理同一个资源，也就是共同拥有同一个run方法。
3）可以避免Java中的单继承的限制。
4）增加程序的健壮性，代码可以被多个线程共享，代码和数据独立。

5）就算Thread的run方法加上synchronized，但是创建的是两个对象，也就是两个锁，两个锁会交替争抢CPU资源，谁抢到谁执行；没有锁也是一样，所以可以不加锁。

●37.AsyncTask
1）onPreExecute() 执行后台耗时操作前被调用，完成一些初始化操作
2）doInBackground(vararg params: String):异步任务，并且asyncTask中只有他是异步任务，其他都不是；必须重写
3）onProgressUpdate(vararg values: Void):可在此设置进度条更新，在doInBackground()中调用publishProgress()
4）onPostExecute(bitmap: Bitmap)：完成后，系统自动调用，在此更新UI

●38.简述TCP,UDP,Socket
1）TCP是经过3次握手，4次挥手完成遗传数据的传递。
2）UDP是无连接的，知道IP地址和端口号，向其发送数据即可，不管数据是否发送成功。
3）Socket是一种不同计算机实时连接，比如说传送文件，即时通讯。

●39.view，activity，window三者之间的关系
一个Activity包含一个Window，也就是一个PhoneWindow，一个PhoneWindow持有一个DecorView的实例，DecorView本身继承FrameLayout。
1）
2）
3）
4）
5）
6）

●40.bitmap最后为什么要置为null。
1）强引用？

●41.onMeasure，onLayout，onDraw，在什么时候执行。
1）在onCreate方法中初始化View的时候，调用了View的onFinishInflate
2）在执行完onResume之后才开始了View的绘制工作，onMeasure -> onSizeChanged -> onLayout -> onDraw
3）onMeasure,onSizeChanged,onLayout,onDraw可能由于setVisible或onResume调用多次，而onAttachedToWindow与onDetachedFromWindow在创建与销毁View的过程中只会调用一次。

●42.RecyclerView的缓存机制？
1）
2）
3）
4）
5）
6）

●42.内存泄漏场景
1）handler内存泄漏：由于消息可以延时处理，所以在退出页面时，移除消息队列中的消息。还可以使用静态的handler，外部类引用使用弱引用处理
2）异步线程中的匿名内部类持有外部引用，导致外部类无法回收，知道耗时任务结束，所以应在退出页面时结束线程任务。
3）context导致的泄漏，酌情使用activityContext还是application的Context。
4）资源对象未关闭导致的，
如Cursor，file等，内部基本都使用了缓冲，要确保关闭，最好再置为null，也就是释放强引用。
5）bitmap导致的内存泄漏，bitmap比较占内存，需要及时释放，尤其是在处理大量图片时，可以结合软引用使用。
6）register的监听服务，也需要手动的unregister。
7）webview导致的内存泄漏？用的太少，不懂。
8）静态view导致的泄漏？不懂
9）非静态内部类的静态实例；
非静态内部类会持有外部类的引用，如果非静态内部类的实例是静态的，就会长期维持着外部类的引用阻止被系统回收，解决办法是使用静态内部类。

●43.如何避免OOM?
1）Bitmap优化，四个方面
一、尺寸压缩：inSampleSize，默认是1，只支持整数，例如等于4，则宽高同时缩小到原来的1/4；、
二、颜色尺寸：合适的format：ALPHA_8/RGB_545/ARGB_8888，还有一个ARGB_4444,已不建议使用。
三、inJustDecodeBounds：为true时只解析宽高不加载到内存中。
四、inBitmap：使用inBitmap属性可以告知Bitmap解码器去尝试使用已经存在的内存区域，新解码的Bitmap会尝试去使用之前那张Bitmap在heap中所占据的pixel data内存区域，而不是去内存中重新申请一块区域来存放Bitmap。
利用这种特性，即使是上千张的图片，也只会仅仅只需要占用屏幕所能够显示的图片数量的内存大小，但是复用存在一些限制，具体体现在：
Android4.4之前只能重用相同大小的bitmap的内存，而4.4及以后版本则只要后来的Bitmap比之前的小即可使用。
使用inBitmap参数前，每创建一个Bitmap对象都会分配一块内存供其使用，而使用了inBitmap参数后，多个Bitmap可以服用一块内存，这样可以提高性能。
2）使用StringBuilder替代String，来进行大量的字符串拼接；
3）使用枚举ArrayMap/SparseArray替代HashMap；HashMap更好内存，因为他需要额外的实例对象来记录Mapping操作，SparseArray更加高效，因为它避免了Key Value的自动装箱，和装箱后的解箱操作。
5）避免在类似onDraw这样的方法中创建对象，因为这种方法调用的次数多。
6）减少内存泄漏

●44.
1）
2）
3）
4）
5）
6）

●.
1）
2）
3）
4）
5）
6）

●.
1）
2）
3）
4）
5）
6）

●.
1）
2）
3）
4）
5）
6）

●.
1）
2）
3）
4）
5）
6）

●.
1）
2）
3）
4）
5）
6）

●.
1）
2）
3）
4）
5）
6）