git命令行
红色代表add之前，
绿色代表add之后

  gcl     -> git clone <repo> <dir> 拉取远程仓库，可以指定位置
  gst     -> git status 显示修改的内容以及在缓存区的状态
  gss     -> git status -s 只显示修改的文件
  ga      -> git add <file> 添加到缓存区
  gaa     -> git add .或--all 添加全部有改动的文件到缓存区
  gd      -> git diff 查看尚未add的缓存内容
  gdca    -> git diff --cached 查看已缓存的内容
          -> git diff head 查看head里的所有修改的内容
          -> git diff --stat 显示尚未缓存的文件
  grh     -> git reset 撤销已缓存的文件
          -> git reset <file> 单独撤销文件
  gcmsg   -> git commit -m "" 提交到本地库
  gp      -> git push 推送到git远程仓库
  gl      -> git pull 从远程仓库拉取
  gup     -> git pull -rebase
  gstl    -> git stash list 拉取仓库前，缓存代码列表
  gstp    -> git stash pop stash@{0} 载入此缓存，并移除
  gstaa   -> git stash apply 载入此缓存
  gstd    -> git stash drop 移除此缓存
  gstc    -> git stash clear 清除缓存
  gb      -> git branch <name> 创建分支
  gco     -> git checkout 检出分支
  gcm     -> git checkout master
  gcd     -> git checkout develop
  gcb     -> git checkout -b <name> 创建并检出到此分支
  gm      -> git merge <name> 合并此<name>到当前分支下
  grb     -> git rebase <name> 把当前分支合并到此<name>下

  gr      -> git remote 远程仓库
  grv     -> git remote -v 远程仓库地址
  gcp     -> git cherry-pick name
git层级：
第一层：未缓存，也即未add前，命名为：未缓存
第二层：暂存区，add后，commit前，命名为：已缓存；
第三层：版本库，commit后，push前，本地版本库，命名为：已提交；
第四层：远程仓库，push后，github云端刷新，命名为：已推送。
总结：只要没有push，本地可以随便玩。

一、Git提交的基本流程
(1)git config --global user.email "邮箱"。
    git config --global user.name "名字"。
    git config --list 显示Git的配置信息;
    简拼：gcf
(2)git clone <repo> <directory> 拉取远程仓库；
    简拼：gcl
(3)git status 显示内容在缓存区里的状态；
    简拼：gst
    git status -s 只显示有改动的文件；
    简拼：gss
(4)git add  <file> 添加单个文件；
    简拼：ga
    git add .（--all） 缓存全部内容;
    简拼：gaa
(5)git diff 尚未add缓存的改动，add前应该先diff一下，看一下修改的缓存内容；
    简拼：gd
    git diff --cached 查看已add的缓存的内容；
    简拼：gdca
    git diff head 查看head里已缓存的与未缓存的所有改动；
    简拼：gd head
    git diff --stat 显示尚未缓存的文件；
    简拼：gd --stat
(6)git reset 取消全部add到缓存里的内容；
    简拼：grh
    git reset <file>  取消此文件add到缓存里的内容;
    简拼：grh file
(7)git commit -m "注释" 提交到本地库;
    简拼：gcmsg
    git commit --amend 修改最后一次提交的内容，先add需要提交的文件。
    简拼：无
(8)git push 提交到云端；
    简拼：gp
(9)git rm <file> 删除文件，如果已经添加到add中，则需要加-f
    git rm --cached <file> 移除缓存区里的内容，暂时感觉与git reset head 没什么不同
    git rm -r * 删除此目录下的内容
    git mv <file> <file> 移动或者重命名

二、更新远程的方式：
(1)git stash 先将本地修改存储起来(后来居上)，再拉取文件,
(2)拉取远程融合的两种方式：
    git pull 拉取当前分支远程库中的内容 ==fetch merge；
    简拼：gl
    git pull --rebase 拉取当前分支远程库中的内容 ==fetch rebase；
    简拼：gup
(3)融合本地stash：
    git stash list stash的列表；
    简拼：gstl
    git stash pop stash@{0} 恢复编号里的本地内容，同时移除此编号；
    简拼：gstp stash@{0}
    git stash apply stash@{0} 恢复编号里的本地内容，不移除此编号;
    简拼：gstaa
    git stash drop stash@{0} 删除此编号存储;
    简拼：gstd
    git stash clear 清空全部；
    简拼：gstc
(4)gp提交完
还可以这样更新：
    1.把当前修改commit
    2.退回修改之前的节点
    3.拉取远程最新节点
    4.用rebase或者merge来合并自己的本地节点与远程节点
    5.提交push

三、分支管理
(1)git branch name  创建分支;
    简拼：gb
    git branch -d name 删除本地分支；
    简拼：gbd
    git push origin :name 删除远程分支，与-d配合，两步相继执行，删除远程；
    简拼：gp origin :name
    git branch -f master HEAD~<num> 把master移动到从HEAD所在位置向上移动num步；
    简拼：gb -f master HEAD~<num>
    git branch -f master hash码 -> 把master移动到hash码所在的位置；
    简拼：gb -f -f master hash码
(2)git checkout name  切换分支；
    简拼：gco
    特例：
        alias gcm='git checkout master'
        alias gcd='git checkout develop'
    git checkout -b name 创建并切换到此分支；
    简拼：gcb
    git checkout name^ 从name的所在位置，向上移动一个提交记录，跟几个^，就向上移动几步；
    git checkout name~<num> 从name的所在位置，向上移动num个提交记录。
    git checkout HEAD~<num> 从HEAD的所在位置，向上移动num个提交记录。
    以下两个待理解：
    git checkout -b 分支 origin/master 分支跟踪另一分支
    git branch -u origin/master 分支
(3)git merge name  合并此<name>分支到当前所在分支下；
    简拼：gm
    特例：
        alias gmom='git merge origin/master'
(4)git rebase name  把当前分支合并到此<name>分支之下；
    简拼：grb
    特例：
        alias grbm='git rebase master'
        alias grbd='git rebase develop'
    git rebase name1 name2 把<name2>合并到此<name1>分支之下;
    git rebase -i HEAD~2 交换提交记录的顺序；
    简拼：grbi

四、撤销提交
    git reset HEAD~1 本地撤销到上一步记录
    简拼：grh
    git revert HEAD  远程撤销到上一步
    简拼：无

五、远程库
    git remote 查看远程库；
    简拼：gr
    git remote -v 远程库的地址
    简拼：grv

六、其他（重要）
    git rebase -i HEAD~2 交换提交记录的顺序；
    简拼：grbi
    git cherry-pick name 把指定记录移动到当前的记录之下；
    简拼：gcp
    git tag "describe" master 为master设置tag；
    简拼：
    示例：
        alias gts='git tag -s'
        alias gtv='git tag | sort -V'
    git describe master 对master的描述；
    git log -num 查看提交记录；

ZSH快捷键：https://github.com/robbyrussell/oh-my-zsh
# Query/use custom command for `git`.
zstyle -s ":vcs_info:git:*:-all-" "command" _omz_git_git_cmd
: ${_omz_git_git_cmd:=git}

#
# Functions
#

# The name of the current branch
# Back-compatibility wrapper for when this function was defined here in
# the plugin, before being pulled in to core lib/git.zsh as git_current_branch()
# to fix the core -> git plugin dependency.
function current_branch() {
  git_current_branch
}
# The list of remotes
function current_repository() {
  if ! $_omz_git_git_cmd rev-parse --is-inside-work-tree &> /dev/null; then
    return
  fi
  echo $($_omz_git_git_cmd remote -v | cut -d':' -f 2)
}
# Pretty log messages
function _git_log_prettily(){
  if ! [ -z $1 ]; then
    git log --pretty=$1
  fi
}
# Warn if the current branch is a WIP
function work_in_progress() {
  if $(git log -n 1 2>/dev/null | grep -q -c "\-\-wip\-\-"); then
    echo "WIP!!"
  fi
}

#
# Aliases
# (sorted alphabetically)
#

alias g='git'

alias ga='git add'
alias gaa='git add --all'
alias gapa='git add --patch'
alias gau='git add --update'
alias gav='git add --verbose'
alias gap='git apply'

alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbda='git branch --no-color --merged | command grep -vE "^(\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'
alias gbl='git blame -b -w'
alias gbnm='git branch --no-merged'
alias gbr='git branch --remote'
alias gbs='git bisect'
alias gbsb='git bisect bad'
alias gbsg='git bisect good'
alias gbsr='git bisect reset'
alias gbss='git bisect start'

alias gc='git commit -v'
alias gc!='git commit -v --amend'
alias gcn!='git commit -v --no-edit --amend'
alias gca='git commit -v -a'
alias gca!='git commit -v -a --amend'
alias gcan!='git commit -v -a --no-edit --amend'
alias gcans!='git commit -v -a -s --no-edit --amend'
alias gcam='git commit -a -m'
alias gcsm='git commit -s -m'
alias gcb='git checkout -b'
alias gcf='git config --list'
alias gcl='git clone --recurse-submodules'
alias gclean='git clean -fd'
alias gpristine='git reset --hard && git clean -dfx'
alias gcm='git checkout master'
alias gcd='git checkout develop'
alias gcmsg='git commit -m'
alias gco='git checkout'
alias gcount='git shortlog -sn'
compdef _git gcount
alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'
alias gcs='git commit -S'

alias gd='git diff'
alias gdca='git diff --cached'
alias gdcw='git diff --cached --word-diff'
alias gdct='git describe --tags `git rev-list --tags --max-count=1`'
alias gds='git diff --staged'
alias gdt='git diff-tree --no-commit-id --name-only -r'
alias gdw='git diff --word-diff'

gdv() { git diff -w "$@" | view - }
compdef _git gdv=git-diff

alias gf='git fetch'
alias gfa='git fetch --all --prune'
alias gfo='git fetch origin'

function gfg() { git ls-files | grep $@ }
compdef _grep gfg

alias gg='git gui citool'
alias gga='git gui citool --amend'

ggf() {
  [[ "$#" != 1 ]] && local b="$(git_current_branch)"
  git push --force origin "${b:=$1}"
}
ggfl() {
[[ "$#" != 1 ]] && local b="$(git_current_branch)"
git push --force-with-lease origin "${b:=$1}"
}
compdef _git ggf=git-checkout

ggl() {
  if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]; then
    git pull origin "${*}"
  else
    [[ "$#" == 0 ]] && local b="$(git_current_branch)"
    git pull origin "${b:=$1}"
  fi
}
compdef _git ggl=git-checkout

ggp() {
  if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]; then
    git push origin "${*}"
  else
    [[ "$#" == 0 ]] && local b="$(git_current_branch)"
    git push origin "${b:=$1}"
  fi
}
compdef _git ggp=git-checkout

ggpnp() {
  if [[ "$#" == 0 ]]; then
    ggl && ggp
  else
    ggl "${*}" && ggp "${*}"
  fi
}
compdef _git ggpnp=git-checkout

ggu() {
  [[ "$#" != 1 ]] && local b="$(git_current_branch)"
  git pull --rebase origin "${b:=$1}"
}
compdef _git ggu=git-checkout

alias ggpur='ggu'
compdef _git ggpur=git-checkout

alias ggpull='git pull origin $(git_current_branch)'
compdef _git ggpull=git-checkout

alias ggpush='git push origin $(git_current_branch)'
compdef _git ggpush=git-checkout

alias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
alias gpsup='git push --set-upstream origin $(git_current_branch)'

alias ghh='git help'

alias gignore='git update-index --assume-unchanged'
alias gignored='git ls-files -v | grep "^[[:lower:]]"'
alias git-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'
compdef _git git-svn-dcommit-push=git

alias gk='\gitk --all --branches'
compdef _git gk='gitk'
alias gke='\gitk --all $(git log -g --pretty=%h)'
compdef _git gke='gitk'

alias gl='git pull'
alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias glod="git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'"
alias glods="git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
alias glola="git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all"
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias glp="_git_log_prettily"
compdef _git glp=git-log

alias gm='git merge'
alias gmom='git merge origin/master'
alias gmt='git mergetool --no-prompt'
alias gmtvim='git mergetool --no-prompt --tool=vimdiff'
alias gmum='git merge upstream/master'
alias gma='git merge --abort'

alias gp='git push'
alias gpd='git push --dry-run'
alias gpoat='git push origin --all && git push origin --tags'
compdef _git gpoat=git-push
alias gpu='git push upstream'
alias gpv='git push -v'

alias gr='git remote'
alias gra='git remote add'
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbd='git rebase develop'
alias grbi='git rebase -i'
alias grbm='git rebase master'
alias grbs='git rebase --skip'
alias grh='git reset'
alias grhh='git reset --hard'
alias grmv='git remote rename'
alias grrm='git remote remove'
alias grset='git remote set-url'
alias grt='cd $(git rev-parse --show-toplevel || echo ".")'
alias gru='git reset --'
alias grup='git remote update'
alias grv='git remote -v'

alias gsb='git status -sb'
alias gsd='git svn dcommit'
alias gsh='git show'
alias gsi='git submodule init'
alias gsps='git show --pretty=short --show-signature'
alias gsr='git svn rebase'
alias gss='git status -s'
alias gst='git status'
alias gsta='git stash save'
alias gstaa='git stash apply'
alias gstc='git stash clear'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gsts='git stash show --text'
alias gsu='git submodule update'

alias gts='git tag -s'
alias gtv='git tag | sort -V'

alias gunignore='git update-index --no-assume-unchanged'
alias gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
alias gup='git pull --rebase'
alias gupv='git pull --rebase -v'
alias glum='git pull upstream master'

alias gwch='git whatchanged -p --abbrev-commit --pretty=medium'
alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m "--wip-- [skip ci]"'