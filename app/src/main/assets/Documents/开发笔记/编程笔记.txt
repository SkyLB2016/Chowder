编程笔记·李彬
●01.Android的系统架构
　　1）操作系统层OS：linux内核。
　　2）硬件抽象层：HAL（Hardware Abstraction Layer），内核与硬件电路之间的抽象接口层。
　　3）native C/C++ Libraries和Android运行环境RunTime。
　　4）应用程序框架Application Framework。
　　5）应用程序Application。
●02.小常识
　　1）File所在路径的文件夹（Floder）存在时，写入数据时自动创建File；
Folder不存在，则需调用mkdir()；
当Folder的父类文件夹也不存在时，应调用mkdirs(),创建父类文件夹。
总结：为保险起见，需检查。
　　2）从XML中获取的有换行的字符串，会有空格，应先去除空格再使用。
　　3）viewGroup的LayoutParams是所有params的父类。
　　4）ViewDragHelper滑动控制类，子类有DrawerLayout与SlidingPaneLayout。
　　5）dalvik是运行时编译，ART是安装时就进行编译。目前采用的是ART模式。
　　6）multidex参见错误统计表.xlsx。
●03.事件监听的几种形式
　　1）匿名内部类，推荐的主要用法。
　　2）内、外部实现类形式.
　　3）自身实现点击事件的接口.
　　4）xml中的onclick属性。
●04.Intent：意图，分显式与隐式两种，显式为指定了component属性，明确启动哪个组件；隐式是搜索符合条件的组件，供用户选择。
　　1）构造函数：可以是类名、action、Component（setClass）。
　　2）操作类型action（setAction()）：Java代码中只能存在一个，存在则必须有一个相同；xml中可存在多个。
　　3）类别筛选category（addCategory()）：Java代码中存在几个匹配几个，xml中可存在多个。
　　4）数据类型data与type：setDataAandType()，地址有特定规则，要么同时设置，要么单独只设置一个。
　　5）启动模式LaunchMode四种（manifest中用）：standard（标准），singleTop（栈顶复用），singleTask（类似于单例，独一份，再次进入后清空在其之上的实例），singleInstance（每次启动都是独立栈中的独一份）
　　6）标志也即启动模式（Intent中用）：
FLAG_ACTIVITY_NEW_TASK(需要搭配FLAG_ACTIVITY_CLEAR_TASK使用)；
FLAG_ACTIVITY_SINGLE_TOP,FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS(跳转页面后自动finish）；
android:excludeFromRecents="true"，目前未起作用)。
　　7）数据传递bundle：Intent内部已经封装好，不用自己封了，serializable，parcelable，也可以转成json字符串传过去。
●05.页面跳转顺序:
　　1）A启动 A.onCreate->A.onStart->A.onResume->
　　2）在A中启动B A.onPause->B.onCreate->B.onStart->B.onResume->A.onStop
　　3）关闭B B.onPause->A.onRestart->A.onStart->A.onResume->B.onStop->B.onDestory
●06.view的基础知识：屏幕的坐标原点是左上角，向右X轴正方向，向下Y轴正方向
　　1）View中提供的获取坐标方法：
　　　　getLeft()与getRight()都是View自身到父布局左边的距离。
　　　　getTop()与getBottom()都是View自身到父布局顶边的距离。
　　　　getX()=getLeft()+getTranslationX()
　　　　getY()=getTop()+getTranslationY()。
　　2）TouchSlop：最小滑动距离，获取方法：ViewConfiguration.get(this).scaledTouchSlop，zoom中有使用
　　3）VelocityTracker：速度跟踪器，只在move中有用，up抬起时为0
　　4）GestureDetector：手势检测，相关方法：单击，拖动，滑动，长按，双击。
　　5）Scroller（待深入研究）：弹性滑动对象，与view中的computeScroll方法配合。
　　6）View的OnTouchListener优先于onTouchEvent，返回true，onTouchEvent不会执行，up事件不执行的话，平常调用的点击事件onClickListener也不会执行。
　　7）requestDisallowInterceptTouchEvent(boolean)强制请求分发触摸事件。
　　8）activity中获取宽高：
　　　　onWindowFocusChanged()
　　　　view.post(runnable)
　　　　viewTreeObserver.addOnGlobalLayoutListener()
　　9）onDraw()：
　　　　绘制背景：background.draw(canvas)
　　　　绘制自己：onDraw()
　　　　绘制children：dispatchDraw()
　　　　绘制装饰：onDrawScrollBars()
　　10）view滑动：
　　　　scrollTo/scrollBy：操作简单，适合对View内容的滑动；
　　　　动画：操作简单，主要适用于实现复杂的动画效果；
　　　　改变布局参数，操作稍微复杂，适用于有交互的View。
●07.自定义View中比较重要的回调方法：
　　第一次进入时的顺序回调
　　1）onFinishInflate()：从XML加载组件完成后回调；
　　2）onAttachedToWindow()：组件放入窗口时回调
　　3）onWindowVisibilityChanged(int)：当包含该组件的窗口可见性发生改变时回调
　　4）onMeasure()：测量view宽高
　　  EXACTLY,精确值模式，具体数字如100dp或者match_parent，默认即为EXACTLY；
　　  AT_MOST,自适应模式，warp_content,需要用setMeasureDimension(width,height)设置算好的宽高；
　　  UNSPECIFIED，想要多大即多大，所以可以超过屏幕尺寸，显示不下的在屏幕之外；用于系统内部，目前没用过。
　　5）onSizeChanged()：组件大小改变时回调；
　　6）onLayout()：控件内的子控件的显示位置，自定义ViewGroup时用
　　7）onDraw()：绘制所需要显示的内容
　　8）onWindowFocusChanged()：当包含该组件的窗口失去或的得到焦点时回调
　　退出时的顺序回调onWindowVisibilityChanged->onWindowFocusChanged->onDetachedFromWindow

　　非顺序回调：
　　9）onTouchEvent()：触摸事件，不消费ACTION_DOWN的话，之后的也不会消费，消费的话down，move，up，统一消耗。
　　10）onFocusChanged()：当该组件焦点发生改变时回调
　　11）onKeyDown()：键盘键按下
　　12）onKeyUp()：键盘键按下后后抬起
　　13）onTrackballEvent()：发生轨迹球事件时回调
　　14）onDetachedFromWindow()：组件从窗口移除时回调
●08.ViewTreeObserver：
　　1）OnWindowFocusChangeListener：window的焦点状态发生改变时,（view已注册）
　　2）OnWindowAttachListener：当View树绑定到window上的时候回调用，（view已注册）
　　3）OnGlobalFocusChangeListener：当一个视图树的焦点状态改变时，会调用的接口
　　4）OnTouchModeChangeListener：当视图树的触摸模式发生改变时，会调用的接口
　　5）OnEnterAnimationCompleteListener：

　　6）OnGlobalLayoutListener：当视图树的布局发生改变或者View在视图树的可见状态发生改变时会调用的接口
　　7）OnComputeInternalInsetsListener：
　　8）OnScrollChangedListener：当视图树的一些组件发生滚动时会调用的接口
　　9）OnPreDrawListener：当视图树将要被绘制时，会调用的接口
　　10）OnWindowShownListener：

　　11）OnDrawListener：视图树绘制时调用
●09.触摸事件机制，传递顺序:activity->window->view,方法回调有：（默认返回false）
    　　1）disPatchTouchEvent(MotionEvent e)（分发事件，一般不用管）
    　　2）onInterceptTouchEvent(MotionEvent e)， ViewGroup独有
    　　3）onTouchEvent(MotionEvent e)
    　　4）MotionEvent中的方法：
    　　　　GetX()与getY()是视图坐标，相对坐标，即是触摸点到它到父布局左边与顶边的距离
    　　　　GetRawX()与getRawY()是绝对坐标，即是触摸点到屏幕左边与顶边的距离
    　　5）触摸按钮时的回调机制：A包B包C
    　　A.disPatch -> A.intercept ->B.disPatch -> B.intercept ->C.disPatch -> C.touch -> B.touch -> A.touch
●10.Canvas方法：
　　1）translate(x,y)：将原点(0,0)移动(x,y)
　　2）rotate(a,x,y)：将画布以(x,y)为中心旋转a度
　　2）scale(x,y,px,py)：将画布缩放
　　2）skew(x,y)：将画布倾斜
　　3）save(),saveLayer(),saveLayerAlpha():保存画布当前状态，并返回int值，方便移除此状态
　　4）restore():返回画布此次保存的初始状态
　　5）restoreToCount():移除画布此次保存的状态
●11.Paint的重要属性：TextPaint.getFontMetricsInt()
　　1）setAntialias()与Paint(Paint.ANTI_ALIAS_FLAG) ：抗锯齿
　　2）setStrokeWidth(),宽度是从中间开始计算的
　　3）setARGB(),setAlpha(),setTextSize(),setStyle(),setColor().
　　4）基准线是baseline
　　5）ascent：字体在baseline上方被推荐的距离（一些字体制作商需要参考这个）
　　6）descent：字体在是baseline下方被推荐的距离（一些字体制作商需要参考这个）
　　7）top：ascent的最大值
　　8）bottom：descent的最大值
　　textHeight=paint.descent()-paint.ascent()
　　9）getTextBounds(String text, int start, int end, Rect bounds):获取文字宽高
　　10）measureText(text)：获取文字宽度
　　11）ColorMatrix
　　12）PorterDuffXfermode（不好用），
　　13）Shader，着色器，渲染器：（TileMode三中模式：CLAMP拉伸；REPEAT重复；MIRROR镜像）
　　　　BitmapShader：位图
　　　　LinearGradient：线性
　　　　RadiolGradient：光束
　　　　SweepGradient：梯度
　　　　ComposeShader：混合
　　14）PathEffect画线用，结合Path的lineTo来使用
　　　　CornerPathEffect：拐角圆滑
　　　　DiscretePathEffect：相当于画了一条毛茸茸的线
　　　　DashPathEffect：画虚线
　　　　PathDashPathEffect：升级的画虚线
　　　　ComPosePathEffect与SunPathEffect：组合前几者
●12.动画类型分为三种：逐帧动画，补间动画，属性动画：
　　1）逐帧动画（Frame Animation）：AnimationDrawable相对于animation-list
　　2）补间动画 Animation：位移，缩放，旋转，透明度；
　　　 TranslateAnimation -> translate
　　　 ScaleAnimation -> scale
　　　 RotateAnimation -> ratate
　　　 AlphaAnimation -> alpha
　　3）属性动画 Animator：ValueAnimator、ObjectAnimator，AnimatorSet组合，也有相应的xml对应字段，动画属性值：
　　  1.translationX、translationY，增量平移。
　　  2.rotation、rotationX、rotationY 旋转。
　　  3.pivotX、pivotY没看出和rotation有什么区别。
　　  4.scaleX、scaleY 缩放。
　　  5.x、y 最终位置。
　　  6.alpha 透明度，默认为1，表示不透明；0代表完全透明，即不可见。
　　  7.PropertyValuesHolder，ObjectAnimator.ofPropertyValuesHolder()。
　　  8.Value的主要方法：addUpdateListener()。
　　  9.过度动画（Transiton Animation）：属性动画的变种。
　　4）布局动画：LayoutAnimationController，在MainAdapter中有使用
　　  1.LayoutAnimationController.ORDER_NORMAL：顺序
　　  2.LayoutAnimationController.ORDER_RANDOM：随机
　　  3.LayoutAnimationController.ORDER_REVERSE：反序
　　5）动画聚合：
　　  1.AnimationSet -> set
　　  2.AnimatorSet的方法
　　  palyTogether()
　　  playSequentially()
　　  play().with()、befor()、after();
　　6）动画插值器TimeInterpolator，计算时间流逝的百分比；类型估值器TypeEvaluaor,计算当前的属性值
　　  1.LinearInterPolator：匀速
　　  2.AccelerateInterpolator：匀加速
　　  3.AccelerateDecelerateInterpolator：起始加速，末尾减速
　　  4.CycleInterpolator：循环播放，正弦曲线
　　  5.DecelerateInterpolator：匀减速
●13.ShapeDrawable -> shape；属性有：
　　1）corners：圆角
　　2）gradient：渐变色
　　3）padding：内边距
　　4）size：基本没用
　　5）solid：内部填充色
　　6）stroke：边框，以及虚边
●14.StateListDrawable -> selector；属性值有：
　　1）android:state_active：代表是否处于激活状态
　　2）android:state_checkable：代表是否处于可勾选状态
　　3）android:state_checked：代表是否处于已勾选状态
　　4）android:state_enabled：代表是否处于可用状态
　　5）android:state_first：代表是否处于开始状态
　　6）android:state_focused：代表是否处于已得到焦点状态
　　7）android:state_last：代表是否处于结束状态
　　8）android:state_middle：代表是否处于中间状态
　　9）android:state_pressed：代表是否处于已被按下状态状态
　　10）android:state_selected：代表是否处于选中状态
　　11）android:state_window_focused：代表窗口是否处于已得到焦点状态
●15.其他drawable
　　LayerDrawable -> layer-list
　　ClipDrawable -> clip
　　AnimationDrawable -> set
　　BitmapDrawable -> bitmap
　　LevelListDrawable -> level-list
　　TransitionDrawable  -> transition；继承自layer
　　insertDrawable -> inset
●16.Bitmap，缓存机制LruCache与DiskLruCache，BitmapFactory.Options
    　　1）inSampleSize，整数，最小为1，等比缩小原图宽高。
    　　2）inJustDecodeBounds，true时只解析宽高不加载到内存中。
●17.SVG:VectorDrawable（vector静态效果）、AnimatedVectorDrawable（animated-vector）：animated-vector组合objectAnimator与vector形成动态的动画效果
●18.handler执行
　　1）handler中执行enqueueMessage()方法将消息放入队列中，等待loop循环并找到此消息。
　　2）Looper.loop()方法是死循环，其中选取消息的方法Message msg = queue.next();也是一个死循环，直到取到消息，开始往下执行；
　　3）取到消息后开始执行handler的分发方法dispatchMessage()开始回调，方法执行完成后，此次消息处理完成。
　　4）handler分发dispatchMessage()：先检测message中的callback是否为空，不为空消费此消息；为空则检测handler自己的callback，返回出rue则消费此消息，终止传递；为false则执行handleMessage()。
　　5）异步线程中创建，需要先调用Looper.prepare().

public void run(){
Looper.prepare();
Handler handler = new Handler();
Looper.loop().
}

●19.性能优化
　　1）布局优化：include，merge，ViewStub，减少层级嵌套，加强view复用。
　　2）绘制优化：在onDraw中不要创建新对象，不执行耗时任务，view的绘制帧率保证60fps是最佳的，每帧所需时间不超过16ms（16ms=1000/60）.
　　3）内存泄漏：分析工具MAT。
　　4）属性动画导致的内存泄漏：无限循环需要关闭。
　　5）响应速度优化和ANR日志分析：避免在主线程中做耗时操作，日志所在：/data/anr/traces.txt
　　6）Recycler与bitmap优化
　　7）线程优化：灵活应用线程池，避免创建大量线程。
　　8）避免创建过多对象；
　　　灵活并酌情使用枚举类型；
　　　常量使用static final来修饰。
　　　使用android特有的数据结构，比如SparseArray和Pair等；
　　　适当使用软引用与弱引用；
　　　采用内存加磁盘缓存；
　　　尽量使用静态内部类，这样可以避免潜在的由于内部类而导致的内存泄漏。
●20.IPC机制：多进程间通信（待深入研究）
　　会造成的问题：
　　1）静态成员和单例模式完全失效：不同进程间的静态和单例是互相独立的。
　　2）线程同步机制完全失效：不同进程间的线程也是互相独立的。
　　3）SharedPreferences可靠性下降：不支持两个进程同时读写，有一定几率会丢数据。
　　4）application多次创建：新进程代表新的虚拟机的启动。
　　通信方式：序列化serializable与parcelable，Binder，Intent，共享文件，Messenger（待深入研究AIDL），ContentProvider，socket网络通信。
●21.数据序列化：Serializable与Parcelable；
　　Serializable应用：
　　1）FileUtils中serialize(path,value)（序列化）与deserialize(path)（反序列化）运用。
　　2）静态成员变量属于类不属于对象，不参与序列化。
　　3）用transient关键字标记的成员变量不参与序列化。
　　Parcelable，Android独有的数据序列化，在CourseEntity中有应用。
　　两者的应用比较：
　　在本地保存数据时以及简单的数据通讯可以使用serializable，Parcelable主要用在内存序列化上，建议比较大的数据对象传输是使用。
●22.Binder（待深入研究）
　　实现IBinder接口（aidl快速实现Binder的工具），主要用在Service开发中，AIDL在PairServiceA中有应用。
●23.线程Thread：AsyncTask，HandlerThread，IntentService，ThreadPoolExecutor。
　　1）Executors.newFixedThreadPool()，都为核心线程，且数量固定的线程池，无超时机制。
　　2）Executors.newCachedThreadPool()，无核心，非核心线程数不限数量，有超时机制60s，适合多图加载这种文件小而多的任务。
　　3）Executors.newScheduledThreadPool()，核心固定，非核心不限，闲置时超时回收，主要用于执行定时任务和具有固定周期的重复任务。
　　4）Executors.newSingleThreadExecutor()，仅创建一个单核心线程，任务串行。
　　5）Thread方法：
　　启动线程：void start()
　　线程休眠：
　　static void sleep(long millis)
　　static void sleep(long millis,int nanos)
　　使其他线程等待当前线程终止：
　　void join()
　　void join(long millis)
　　void join(long millis,int nanos)
　　当前运行线程释放处理器资源：
　　static void yield()
　　获取当前运行的线程引用：
　　static Thread currentThread()
●24.JNI和NDK编程，JNI是java的本地交互，NDK是Android提供得工具集合，可以在android中更加方便的通过JNI来访问本地代码，如C，C++，NDK
还提供了交叉编译器，开发人员只需要简单的修改mk文件就可以生成特定的CPU平带的动态库，使用NDK有如下好处：
　　1）提高代码的安全性，so库反编译比较困难；
　　2）可以使用目前已有的C/C++开源库；
　　3）便于平台间的移植；
　　4）提高程序在某些特定情形下的执行效率，但是并不能明显提升Android程序的性能；
　　5）在cmd终端中进入到main目录下 cd (具体路径)/apiutils/src/main
　　执行此语句  javah -d jni -classpath ../../build/intermediates/classes/debug com.sky.NDKString  会自动生成jni文件com_sky_NDKString.h,自定义.c的file
●25.ProGuard，参见app下的proguard文件，App研发录
　　1）压缩Shrink：侦测并移除代码中的无用类，字段，方法和特性。
　　2）优化Optimize：对字节码进行优化，移除无用的指令。
　　3）混淆Obfuscate：使用a、b、c、d这样简短而无意义的名称，对类、字段和方法进行重命名。
　　4）预检Preveirfy：在java平台上对处理后的代码进行预检。
●26.window与WindowManager是ipc机制的应用：
　　1）addView(v,layoutparam)；
　　2）updateViewLayout(v,layoutparam)；
　　3）rempveView(v)；
●27.系统自带的各种管理器与多媒体处理：
　　1）TelephonyManager：电话管理器；
　　2）SmsManager：短信管理器；
　　3）AudioManager：音频管理器；
　　4）Vibrator：振动器；
　　5）AlarmManager：手机闹钟服务；

　　6）MediaPlayer：音频；
　　7）SoundPool：音频；
　　8）VideoView：播放视频；
　　9）mediaRecorder：录制音频；
●28.java内存
　　1）寄存器：我们在程序中无法控制。
　　2）栈：存放基本类型的数据和对象的引用，但对象本身不存放在栈中，而是存放在堆中，还有能确定的字符串。
　　3）堆：存放用new产生的数据。
　　4）静态域：存放在对象中用static定义的静态成员。
　　5）常量池：存放常量。
　　6）非RAM(随机存取存储器)存储：硬盘等永久存储空间。
●29.IO流
　　一、Java流的分类
　　1）按流向分:
　　输入流: 程序可以从中读取数据的流。
　　输出流: 程序能向其中写入数据的流。
　　2）按数据传输单位分:
　　字节流: 以字节为单位传输数据的流，通常用来读取二进制数据，如图象和声音。
　　字符流: 以Unicode字符为单位传输数据的流，通常用来读写文本信息。
　　3）按功能分:
　　节点流: 用于直接操作目标设备的流
　　过滤流: 是对一个已存在的流的链接和封装，通过对数据进行处理为程序提供功能强大、灵活的读写功能。
　　二、java.io常用类，位于JDK的java.io包中，都分别继承自以下四种抽象流类：
　　1）InputStream：输入流，用于向程序中输入数据的，字节流，单位：字节byte（8位）。
　　2）OutputSteam：输出流，程序用于向外输出数据的，字节流，单位：字节byte（8位）。
　　3）Reader：输入流，用于向程序中输入数据的，单位：字符char（16位）。
　　4）Writer：输出流，程序用于向外输出数据的，单位：字符char（16位）。
　　5）InputStreamReader将InputStream转化成Reader
　　6）OutputStreamWriter将OutputStream转化成Writer
●30.HTTP请求类
　　http://www.baidu.com/...
　　协议  主机地址     资源
　　1）GET      请求获取Request-URI所标识的资源
　　2）POST     在Request-URI所标识的资源后附加新的资源
　　3）HEAD     请求获取由Request-URI所标识的资源得响应消息报头
　　4）PUT      请求服务器存储一个资源，并用Request-URI作为其标识
　　5）DELETE   请求服务器删除Request-URI所标识的资源
　　6）TRACE    请求服务器回送收到的请求信息，主要用于测试或诊断
　　7）CONNECT  保留将来使用
　　8）OPTIONS  请求查询服务器的性能，或者查询与资源相关的选项
　　9）错误码含义：
　　　400 bad Request    客户端请求有语法错误，不能被服务器所理解
　　　401 unauthorized   请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用
　　　403 forbidden      服务器收到请求，但是拒绝提供服务
　　　404 not found      请求资源不存在，eg：输入了错误的URL
　　　500 internal server error 服务器发生不可预期的错误
　　　503 server unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复
●31.Collections：排序
　　1）reverse():
　　2）
　　3）
　　4）
　　5）
　　6）
●32.JAVA锁机制，原子性
　　1）
　　2）
　　3）
　　4）
　　5）
　　6）
●.●.小知识
　　1）空白行，或者有注释的的行，Java编译器都会忽略掉
●.
　　1）
　　2）
　　3）
　　4）
　　5）
　　6）
