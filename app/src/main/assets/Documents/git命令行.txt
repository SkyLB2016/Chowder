git命令行
git分层：
第一层：未缓存，也即未add前；
第二层：暂存区，add后，commit前；
第三层：版本库，commit后，push前，本地版本库；
第四层：远程仓库，push后，github云端刷新。
(1)git clone <repo> <directory>
　　rm -rf 删除文件
(2)git config --global user.email "邮箱"。
(3)git config --global user.name "名字"。
(4)git add  <file> 添加单个文件；
　　git add . 缓存全部内容。
(5)git status 显示内容在缓存区里的状态。
　　git status -s 显示摘要内容。
(6)git diff 尚未add缓存的改动，add前先diff一下，看一下未添加的缓存内容。
　　git diff --cached 查看已add的缓存的内容
　　git diff head 查看已缓存的与未缓存的所有改动
　　git diff --stat 显示摘要
(7)git commit -m "注释" 提交到本地库
　　git commit --amend 修改最后一次提交的内容，先add需要提交的文件。
(8)git push 提交到云端
(9)git reset head 取消全部add到缓存里的内容
　　git reset head <file>  取消此文件add到缓存里的内容
(10)git stash 先将本地修改存储起来(后来居上)，在拉取文件,
　　git pull 拉取当前分支远程库中的内容 ==fetch merge
　　git pull --rebase 拉取当前分支远程库中的内容 ==fetch rebase
　　git stash list
　　git stash pop stash@{0} 恢复编号里的本地内容，同时移除此编号
　　git stash apply stash@{0} 恢复编号里的本地内容，不移除
　　git stash stop stash@{0} 删除此编号存储
　　git stash clear
　　还可以这样
　　1.把当前修改commit
　　2.退回修改之前的节点
　　3.拉取远程最新节点
　　4.用rebase或者merge来合并自己的本地节点与远程节点
　　5.提交push　
(11)git rm <file>删除文件，如果已经添加到add中，则需要加-f
　　git rm --cached <file> 移除缓存区里的内容，暂时感觉与git reser head 没什么不同
　　git rm -r * 在某个目录中执行词语句，会删除整个文件夹下的内容
　　git mv <file> <file> 移动或者重命名

分支管理
(12)git branch name  创建分支
　　git branch -d name 删除本地分支
　　git push origin :name 删除远程分支，两步相继执行，删除远程
　　git branch -f master HEAD~<num> 把master移动到从HEAD所在位置向上移动num步
　　git branch -f master hash码 把master移动到hash码所在的位置
(13)git checkout name  切换分支
　　git checkout -b name 创建并切换到此分支
　　git checkout name^ 从name的所在位置，向上移动一个提交记录，跟几个^，就向上移动几步
　　git checkout name~<num> 从name的所在位置，向上移动num个提交记录。
　　git checkout HEAD~<num> 从HEAD的所在位置，向上移动num个提交记录。
git checkout -b 分支 origin/master 分支跟踪另一分支
git branch -u origin/master 分支
(14)git merge name  合并此分支到当前分支下
(15)git rebase name  把当前分支合并到此<name>分支之下
　　git rebase name name2 把name2合并到此<name>分支之下
撤销提交
(16)git reset HEAD~1 本地撤销到上一步记录
　　git revert HEAD  远程撤销到上一步
远程库
(17)git remote 查看远程库
　　git remote -v 远程库的地址

git rebase -i HEAD~2 交换提交记录的顺序
git cherry-pick name 把指定记录移动到当前的记录之下
git tag "describe" master
git describe master
git log -num 查看提交记录

ls (-a) 文件夹内的文件列表
vim 编辑器
?? 代表未添加到暂存区
A 代表添加暂存区
M 代表修改的文件
红色代表未添加，绿色代表执行add之后












#
# Aliases
# (sorted alphabetically)
#

alias g='git'

alias ga='git add'
alias gaa='git add --all'
alias gapa='git add --patch'
alias gau='git add --update'
alias gav='git add --verbose'
alias gap='git apply'

alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbda='git branch --no-color --merged | command grep -vE "^(\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'
alias gbl='git blame -b -w'
alias gbnm='git branch --no-merged'
alias gbr='git branch --remote'
alias gbs='git bisect'
alias gbsb='git bisect bad'
alias gbsg='git bisect good'
alias gbsr='git bisect reset'
alias gbss='git bisect start'

alias gc='git commit -v'
alias gc!='git commit -v --amend'
alias gcn!='git commit -v --no-edit --amend'
alias gca='git commit -v -a'
alias gca!='git commit -v -a --amend'
alias gcan!='git commit -v -a --no-edit --amend'
alias gcans!='git commit -v -a -s --no-edit --amend'
alias gcam='git commit -a -m'
alias gcsm='git commit -s -m'
alias gcb='git checkout -b'
alias gcf='git config --list'
alias gcl='git clone --recurse-submodules'
alias gclean='git clean -fd'
alias gpristine='git reset --hard && git clean -dfx'
alias gcm='git checkout master'
alias gcd='git checkout develop'
alias gcmsg='git commit -m'
alias gco='git checkout'
alias gcount='git shortlog -sn'
compdef _git gcount
alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'
alias gcs='git commit -S'

alias gd='git diff'
alias gdca='git diff --cached'
alias gdcw='git diff --cached --word-diff'
alias gdct='git describe --tags `git rev-list --tags --max-count=1`'
alias gds='git diff --staged'
alias gdt='git diff-tree --no-commit-id --name-only -r'
alias gdw='git diff --word-diff'

gdv() { git diff -w "$@" | view - }
compdef _git gdv=git-diff

alias gf='git fetch'
alias gfa='git fetch --all --prune'
alias gfo='git fetch origin'

function gfg() { git ls-files | grep $@ }
compdef _grep gfg

alias gg='git gui citool'
alias gga='git gui citool --amend'

ggf() {
  [[ "$#" != 1 ]] && local b="$(git_current_branch)"
  git push --force origin "${b:=$1}"
}
ggfl() {
[[ "$#" != 1 ]] && local b="$(git_current_branch)"
git push --force-with-lease origin "${b:=$1}"
}
compdef _git ggf=git-checkout

ggl() {
  if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]; then
    git pull origin "${*}"
  else
    [[ "$#" == 0 ]] && local b="$(git_current_branch)"
    git pull origin "${b:=$1}"
  fi
}
compdef _git ggl=git-checkout

ggp() {
  if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]; then
    git push origin "${*}"
  else
    [[ "$#" == 0 ]] && local b="$(git_current_branch)"
    git push origin "${b:=$1}"
  fi
}
compdef _git ggp=git-checkout

ggpnp() {
  if [[ "$#" == 0 ]]; then
    ggl && ggp
  else
    ggl "${*}" && ggp "${*}"
  fi
}
compdef _git ggpnp=git-checkout

ggu() {
  [[ "$#" != 1 ]] && local b="$(git_current_branch)"
  git pull --rebase origin "${b:=$1}"
}
compdef _git ggu=git-checkout

alias ggpur='ggu'
compdef _git ggpur=git-checkout

alias ggpull='git pull origin $(git_current_branch)'
compdef _git ggpull=git-checkout

alias ggpush='git push origin $(git_current_branch)'
compdef _git ggpush=git-checkout

alias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
alias gpsup='git push --set-upstream origin $(git_current_branch)'

alias ghh='git help'

alias gignore='git update-index --assume-unchanged'
alias gignored='git ls-files -v | grep "^[[:lower:]]"'
alias git-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'
compdef _git git-svn-dcommit-push=git

alias gk='\gitk --all --branches'
compdef _git gk='gitk'
alias gke='\gitk --all $(git log -g --pretty=%h)'
compdef _git gke='gitk'

alias gl='git pull'
alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias glod="git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'"
alias glods="git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
alias glola="git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all"
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias glp="_git_log_prettily"
compdef _git glp=git-log

alias gm='git merge'
alias gmom='git merge origin/master'
alias gmt='git mergetool --no-prompt'
alias gmtvim='git mergetool --no-prompt --tool=vimdiff'
alias gmum='git merge upstream/master'
alias gma='git merge --abort'

alias gp='git push'
alias gpd='git push --dry-run'
alias gpoat='git push origin --all && git push origin --tags'
compdef _git gpoat=git-push
alias gpu='git push upstream'
alias gpv='git push -v'

alias gr='git remote'
alias gra='git remote add'
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbd='git rebase develop'
alias grbi='git rebase -i'
alias grbm='git rebase master'
alias grbs='git rebase --skip'
alias grh='git reset'
alias grhh='git reset --hard'
alias grmv='git remote rename'
alias grrm='git remote remove'
alias grset='git remote set-url'
alias grt='cd $(git rev-parse --show-toplevel || echo ".")'
alias gru='git reset --'
alias grup='git remote update'
alias grv='git remote -v'

alias gsb='git status -sb'
alias gsd='git svn dcommit'
alias gsh='git show'
alias gsi='git submodule init'
alias gsps='git show --pretty=short --show-signature'
alias gsr='git svn rebase'
alias gss='git status -s'
alias gst='git status'
alias gsta='git stash save'
alias gstaa='git stash apply'
alias gstc='git stash clear'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gsts='git stash show --text'
alias gsu='git submodule update'

alias gts='git tag -s'
alias gtv='git tag | sort -V'

alias gunignore='git update-index --no-assume-unchanged'
alias gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
alias gup='git pull --rebase'
alias gupv='git pull --rebase -v'
alias glum='git pull upstream master'

alias gwch='git whatchanged -p --abbrev-commit --pretty=medium'
alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m "--wip-- [skip ci]"'