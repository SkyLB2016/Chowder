apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation "com.android.support:cardview-v7:$googleVer"
    implementation "com.android.support:appcompat-v7:$googleVer"
    implementation "com.android.support:design:$googleVer"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation project(':common')
    if (!puzzle.toBoolean()) {
        implementation project(':puzzle')
        implementation project(':g2048')
    }
    //butterknife
//    annotationProcessor "com.jakewharton:butterknife-compiler:$bknifeVer"
//    kapt "com.jakewharton:butterknife-compiler:$bknifeVer"
    //butterknife
}
def keyPass = rootProject.file("local.properties")
def key = new Properties()
key.load(new FileInputStream(keyPass))
android {
    compileSdkVersion 27
    buildToolsVersion '28.0.2'
    defaultConfig {
        applicationId "com.sky.chowder"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 3
        versionName "3.0"
        // dex突破65535的限制
//        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [CHANNEL_VALUE: "umeng"]//默认是umeng的渠道
        ndk {
            //添加对应cpu类型的.so库。
            abiFilters 'armeabi-v7a', 'armeabi-v8a', 'armeabi', 'x86'
        }
    }
    signingConfigs {
        debug {
            keyAlias key['keyAlias']
            keyPassword key['keyPassword']
            storeFile file(key['storeFile'])
            storePassword key['storePassword']
        }
        release {
            keyAlias key['keyAlias']
            keyPassword key['keyPassword']
            storeFile file(key['storeFile'])
            storePassword key['storePassword']
        }
    }
    buildTypes {
        debug {
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
            minifyEnabled true //是否开启混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            creatName()
        }
        release {
            versionNameSuffix "-release"
            minifyEnabled true //是否开启混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release  //签名
            zipAlignEnabled true //Zipalign优化
            creatName()
        }
    }
    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }
    flavorDimensions "sky"
    productFlavors {
        sky {
            dimension "sky"
        }
//        baidu {}
//        xiaomi {}
//        umeng {}
    }
    productFlavors.all { flavor -> flavor.manifestPlaceholders = [CHANNEL_VALUE: name] }
}

def creatName() {
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == "debug") outputFileName = "${variant.baseName}_${variant.versionName}.apk"
            else outputFileName = "${variant.baseName}_${variant.versionName}_${buildTime()}.apk"
        }
    }
}
//            applicationVariants.all { variant ->
//                variant.outputs.all { output ->
//                    output.processManifest.doLast {
//                        // Stores the path to the maifest.
//                        String manifestPath = "$manifestOutputDirectory/AndroidManifest.xml"
//                        // Stores the contents of the manifest.
//                        def manifestContent = file(manifestPath).getText()
//                        // Changes the version code in the stored text.
//                manifestContent = manifestContent.replace('android:versionCode="1"', String.format('android:versionCode="%s"', generatedCode))
//                        // Overwrites the manifest with the new text.
//                        file(manifestPath).write(manifestContent)
//                    }
//
//                }
//            }