Java 运算符
算术运算符
关系运算符
位运算符
逻辑运算符
赋值运算符
条件运算符
其他运算符

1）算术运算符：7个；
+ 	加法 - 相加运算符两侧的值
- 	减法 - 左操作数减去右操作数
* 	乘法 - 相乘操作符两侧的值
/ 	除法 - 左操作数除以右操作数
％ 	取余 - 左操作数除以右操作数的余数
++ 	自增 - 操作数的值增加1
-- 	自减 - 操作数的值减少1
2）关系运算符：6个；
== 检查如果两个操作数的值是否相等，如果相等则条件为真。
!= 检查如果两个操作数的值是否相等，如果值不相等则条件为真。
> 检查左操作数的值是否大于右操作数的值，如果是那么条件为真。
< 检查左操作数的值是否小于右操作数的值，如果是那么条件为真。
>= 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。
<= 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。
3）位运算符：二进制运算符，7个，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。
位运算符作用在所有的位上，并且按位运算。
假设a = 60，和b = 13;它们的二进制格式表示将如下：
A = 0011 1100
B = 0000 1101
-----------------
A&b = 0000 1100
A | B = 0011 1101
A ^ B = 0011 0001
~A= 1100 0011
下表列出了位运算符的基本运算,假设整数变量A的值为60和变量B的值为13：
＆ 	相当于取交集；按位与操作符，当且仅当两个操作数的某一位都非0时候结果的该位才为1。 	（A＆B），得到12，即0000 1100
| 	相当于取并集；按位或操作符，只要两个操作数的某一位有一个非0时候结果的该位就为1。 	（A | B）得到61，即 0011 1101
^ 	相当于取补集；按位异或操作符，两个操作数的某一位不相同时候结果的该位就为1。 	（A ^ B）得到49，即 0011 0001
〜 	按位补运算符翻转操作数的每一位。 	（〜A）得到-60，即1100 0011
<< 	按位左移运算符。左操作数按位左移右操作数指定的位数。 	A << 2得到240，即 1111 0000
>> 	按位右移运算符。左操作数按位右移右操作数指定的位数。 	A >> 2得到15即 1111
>>>	按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 	A>>>2得到15即0000 1111
4）逻辑运算符
&& 	短路与，称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。 	（A && B）为假。
|| 	称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。 	（A | | B）为真。
！ 	称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。 	！（A && B）为真。
5）赋值运算符
= 	简单的赋值运算符，将右操作数的值赋给左侧操作数 	C = A + B将把A + B得到的值赋给C
+= 	加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数 	C + = A等价于C = C + A
-= 	减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数 	C - = A等价于C = C - A
*= 	乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数 	C * = A等价于C = C * A
/= 	除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数 	C / = A等价于C = C / A
％= 	取余和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 	C％= A等价于C = C％A
<<=	左移位赋值运算符 	C << = 2等价于C = C << 2
>>=	右移位赋值运算符 	C >> = 2等价于C = C >> 2
＆= 	按位与赋值运算符 	C＆= 2等价于C = C＆2
^= 	按位异或赋值操作符 	C ^ = 2等价于C = C ^ 2
|= 	按位或赋值操作符 	C | = 2等价于C = C | 2
6）条件运算符（?:）；也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。
7）instanceOf 运算符，该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。