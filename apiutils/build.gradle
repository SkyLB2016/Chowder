apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

ext {
    bintrayRepo = 'skylb'
    bintrayName = 'apiutils'

    publishedGroupId = 'com.sky'
    libraryName = 'ApiUtils'
    artifact = 'apiutils'

    libraryDescription = 'A wrapper for Facebook Native Like Button (LikeView) on Android'

    siteUrl = 'https://github.com/SkyLB2016/Chowder'
    gitUrl = 'https://github.com/SkyLB2016/Chowder.git'

    libraryVersion = '2.2.97'
    developerId = 'SkyLB2016'

    developerName = 'libin (sky)'
    developerEmail = '1136096189@qq.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}
group = publishedGroupId// Maven Group ID for the artifact
version = libraryVersion
android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 20171027
        versionName libraryVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}
def retrofit2 = '2.3.0'
dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api "com.android.support:appcompat-v7:$googleVer"
    api "com.android.support:recyclerview-v7:$googleVer"
    api "com.android.support:design:$googleVer"
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //rxjava
    api 'io.reactivex.rxjava2:rxjava:2.1.5'
    api 'io.reactivex.rxjava2:rxandroid:2.0.1'
    //rxjava
    //retrofit2
    api "com.squareup.retrofit2:retrofit:$retrofit2"
    api "com.squareup.retrofit2:converter-gson:$retrofit2"
    api "com.squareup.retrofit2:adapter-rxjava2:$retrofit2"
    //retrofit2
    api 'com.squareup.okhttp3:okhttp:3.9.0'
//    api "com.jakewharton:butterknife:$bknifeVer"
    //工具类
    //    api 'com.blankj:utilcode:1.6.3'
}
//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
apply plugin: 'com.github.dcendents.android-maven'

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}
//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
apply plugin: 'com.jfrog.bintray'

//version = libraryVersion
if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        options.encoding = "UTF-8"
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
repositories {
    mavenCentral()
}
